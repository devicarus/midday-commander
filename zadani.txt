# Správce souborů

## Zadání z Progtestu
Vaším úkolem je vytvořit program na správu souborů a adresářů (podobně jako to dělá program Midnight Commander).

Implementujte následující funkcionality:
1. Umožněte pracovat se soubory: běžnými, adresáři i symbolickými linky.
2. Základní operace: vytváření, kopírování, přesun, mazání.
3. Předchozí operace (kromě vytváření) je potřeba umět i nad množinou souborů definovaných regulárním výrazem.
4. Pokročilejší operace: spojování souborů (concat), vyhledávání souborů podle textu v nich obsaženého, deduplikace souborů (nalezení duplikátních souborů a nahrazení duplicit za symbolické linky).
5. Vytvořte rozumné uživatelské rozhraní, které umožní alespoň zobrazení adresářů nad kterými se pracuje, vizuálně rozliší soubory, adresáře a symbolické linky a umožní navigaci mezi adresáři.

V této úloze není možné implementovat jednotlivé operace využitím volání systémových příkazů, např. pomocí příkazu system (výjimku tvoří smazání obrazovky, př. `system("clear")`). Jednotlivé operace můžete implementovat nástroji standardní knihovny (př. `std::filesystem`). V případě, že vám nestačí, můžete využít systémové knihovny `unistd.h`, `dirent.h`, `stat.h` a další. Složitější operace je nutné implementovat manuálně.

Kde lze využít polymorfismus? (doporučené)
- typy souborů: běžný, adresář, symbolický link, …
- typy operací: vytvoření, kopírování, přesun, mazání, …
- hledání duplikátních souborů: exaktní, s ignorování whitespaces, …
- uživatelské rozhraní: konzole, ncurses, SDL, OpenGL (různé varianty), …

## Upřesnění zadání
Budu implementovat interaktivní program pro práci se soubory a adresáři.
Uživatelské rozhraní bude napsané v `ncurses`.

Uživatel bude s programem interagovat čistě pomocí hotkeys,
které budou přiřazené k tzv. akcím v mapě `Interface.actions` (viz diagram tříd).
Program je kompletně založen na těchto hotkey-triggered akcích,
tedy i operace jako např. zavření programu budou akce
(vedle těch evidentních, jako smazání/přesun douboru, atd.).

Provedení akce na množině souborů bude řešeno pomocí množiny `State.selected` (viz diagram tříd),
kde budou uloženy jako `Entry`. Ty půjde do této množiny přidat buď po jednom manuálně, nebo hromadně regexem.
`Entry` se dále dělí na `File`, `Folder` a `Symlink` (polymorfismus).

Jsou 2 typy akcí (další využití polymorfismu)
- `ForEach`
    - akce prováděná zvlášť na každém `Entry` ve `State.selected`
    - např. `Delete`, `Move`, `Copy` ...
- `Once`
    - akce má přímý přístup ke `State` i `FileView` a volnou ruku s nimi nějak pracovat
    - např. `Create`, `Concat`, `FindByContent`, `Deduplicate`, `Quit`, ...

> Konečný seznam akcí společně s hotkeys se nachází v dokumentaci
